package com.jkrm.fupin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jkrm.fupin.bean.CacheFileBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_FILE_BEAN".
*/
public class CacheFileBeanDao extends AbstractDao<CacheFileBean, Long> {

    public static final String TABLENAME = "CACHE_FILE_BEAN";

    /**
     * Properties of entity CacheFileBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Progress = new Property(1, int.class, "progress", false, "PROGRESS");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(4, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property CurrentSize = new Property(5, long.class, "currentSize", false, "CURRENT_SIZE");
        public final static Property FilePath = new Property(6, String.class, "filePath", false, "FILE_PATH");
        public final static Property VideoId = new Property(7, String.class, "videoId", false, "VIDEO_ID");
        public final static Property ImgUrl = new Property(8, String.class, "imgUrl", false, "IMG_URL");
    }


    public CacheFileBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CacheFileBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_FILE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROGRESS\" INTEGER NOT NULL ," + // 1: progress
                "\"URL\" TEXT NOT NULL ," + // 2: url
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 4: fileSize
                "\"CURRENT_SIZE\" INTEGER NOT NULL ," + // 5: currentSize
                "\"FILE_PATH\" TEXT," + // 6: filePath
                "\"VIDEO_ID\" TEXT," + // 7: videoId
                "\"IMG_URL\" TEXT);"); // 8: imgUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_FILE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheFileBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProgress());
        stmt.bindString(3, entity.getUrl());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
        stmt.bindLong(6, entity.getCurrentSize());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(7, filePath);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(8, videoId);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(9, imgUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheFileBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProgress());
        stmt.bindString(3, entity.getUrl());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
        stmt.bindLong(6, entity.getCurrentSize());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(7, filePath);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(8, videoId);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(9, imgUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CacheFileBean readEntity(Cursor cursor, int offset) {
        CacheFileBean entity = new CacheFileBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // progress
            cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getLong(offset + 4), // fileSize
            cursor.getLong(offset + 5), // currentSize
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // filePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // videoId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // imgUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheFileBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProgress(cursor.getInt(offset + 1));
        entity.setUrl(cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.getLong(offset + 4));
        entity.setCurrentSize(cursor.getLong(offset + 5));
        entity.setFilePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImgUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CacheFileBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CacheFileBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CacheFileBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
